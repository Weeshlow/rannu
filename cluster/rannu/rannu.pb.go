// Code generated by protoc-gen-go.
// source: rannu.proto
// DO NOT EDIT!

/*
Package rannu is a generated protocol buffer package.

It is generated from these files:
	rannu.proto

It has these top-level messages:
	Unit
	Vector
	Matrix
*/
package rannu

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Unit struct {
}

func (m *Unit) Reset()                    { *m = Unit{} }
func (m *Unit) String() string            { return proto.CompactTextString(m) }
func (*Unit) ProtoMessage()               {}
func (*Unit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Vector struct {
	Elements []float64 `protobuf:"fixed64,1,rep,packed,name=elements" json:"elements,omitempty"`
}

func (m *Vector) Reset()                    { *m = Vector{} }
func (m *Vector) String() string            { return proto.CompactTextString(m) }
func (*Vector) ProtoMessage()               {}
func (*Vector) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Matrix struct {
	Elements []*Vector `protobuf:"bytes,1,rep,name=elements" json:"elements,omitempty"`
}

func (m *Matrix) Reset()                    { *m = Matrix{} }
func (m *Matrix) String() string            { return proto.CompactTextString(m) }
func (*Matrix) ProtoMessage()               {}
func (*Matrix) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Matrix) GetElements() []*Vector {
	if m != nil {
		return m.Elements
	}
	return nil
}

func init() {
	proto.RegisterType((*Unit)(nil), "rannu.Unit")
	proto.RegisterType((*Vector)(nil), "rannu.Vector")
	proto.RegisterType((*Matrix)(nil), "rannu.Matrix")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Worker service

type WorkerClient interface {
	RecordVectors(ctx context.Context, opts ...grpc.CallOption) (Worker_RecordVectorsClient, error)
	GetMean(ctx context.Context, in *Unit, opts ...grpc.CallOption) (*Vector, error)
	GetScatterMatrix(ctx context.Context, in *Vector, opts ...grpc.CallOption) (*Matrix, error)
}

type workerClient struct {
	cc *grpc.ClientConn
}

func NewWorkerClient(cc *grpc.ClientConn) WorkerClient {
	return &workerClient{cc}
}

func (c *workerClient) RecordVectors(ctx context.Context, opts ...grpc.CallOption) (Worker_RecordVectorsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Worker_serviceDesc.Streams[0], c.cc, "/rannu.Worker/RecordVectors", opts...)
	if err != nil {
		return nil, err
	}
	x := &workerRecordVectorsClient{stream}
	return x, nil
}

type Worker_RecordVectorsClient interface {
	Send(*Vector) error
	CloseAndRecv() (*Unit, error)
	grpc.ClientStream
}

type workerRecordVectorsClient struct {
	grpc.ClientStream
}

func (x *workerRecordVectorsClient) Send(m *Vector) error {
	return x.ClientStream.SendMsg(m)
}

func (x *workerRecordVectorsClient) CloseAndRecv() (*Unit, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Unit)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *workerClient) GetMean(ctx context.Context, in *Unit, opts ...grpc.CallOption) (*Vector, error) {
	out := new(Vector)
	err := grpc.Invoke(ctx, "/rannu.Worker/GetMean", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) GetScatterMatrix(ctx context.Context, in *Vector, opts ...grpc.CallOption) (*Matrix, error) {
	out := new(Matrix)
	err := grpc.Invoke(ctx, "/rannu.Worker/GetScatterMatrix", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Worker service

type WorkerServer interface {
	RecordVectors(Worker_RecordVectorsServer) error
	GetMean(context.Context, *Unit) (*Vector, error)
	GetScatterMatrix(context.Context, *Vector) (*Matrix, error)
}

func RegisterWorkerServer(s *grpc.Server, srv WorkerServer) {
	s.RegisterService(&_Worker_serviceDesc, srv)
}

func _Worker_RecordVectors_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WorkerServer).RecordVectors(&workerRecordVectorsServer{stream})
}

type Worker_RecordVectorsServer interface {
	SendAndClose(*Unit) error
	Recv() (*Vector, error)
	grpc.ServerStream
}

type workerRecordVectorsServer struct {
	grpc.ServerStream
}

func (x *workerRecordVectorsServer) SendAndClose(m *Unit) error {
	return x.ServerStream.SendMsg(m)
}

func (x *workerRecordVectorsServer) Recv() (*Vector, error) {
	m := new(Vector)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Worker_GetMean_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Unit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).GetMean(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rannu.Worker/GetMean",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).GetMean(ctx, req.(*Unit))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_GetScatterMatrix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vector)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).GetScatterMatrix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rannu.Worker/GetScatterMatrix",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).GetScatterMatrix(ctx, req.(*Vector))
	}
	return interceptor(ctx, in, info, handler)
}

var _Worker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rannu.Worker",
	HandlerType: (*WorkerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMean",
			Handler:    _Worker_GetMean_Handler,
		},
		{
			MethodName: "GetScatterMatrix",
			Handler:    _Worker_GetScatterMatrix_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RecordVectors",
			Handler:       _Worker_RecordVectors_Handler,
			ClientStreams: true,
		},
	},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("rannu.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 192 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x2e, 0x4a, 0xcc, 0xcb,
	0x2b, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x73, 0x94, 0xd8, 0xb8, 0x58, 0x42,
	0xf3, 0x32, 0x4b, 0x94, 0x34, 0xb8, 0xd8, 0xc2, 0x52, 0x93, 0x4b, 0xf2, 0x8b, 0x84, 0xe4, 0xb8,
	0x38, 0x52, 0x73, 0x52, 0x73, 0x53, 0xf3, 0x4a, 0x8a, 0x25, 0x18, 0x15, 0x98, 0x35, 0x18, 0x9d,
	0x98, 0x04, 0x18, 0x83, 0xe0, 0x62, 0x4a, 0xc6, 0x5c, 0x6c, 0xbe, 0x89, 0x25, 0x45, 0x99, 0x15,
	0x42, 0x9a, 0x68, 0x2a, 0xb9, 0x8d, 0x78, 0xf5, 0x20, 0x56, 0x40, 0x8c, 0x42, 0x68, 0x32, 0x9a,
	0xc6, 0xc8, 0xc5, 0x16, 0x9e, 0x5f, 0x94, 0x9d, 0x5a, 0x24, 0xa4, 0xcf, 0xc5, 0x1b, 0x94, 0x9a,
	0x9c, 0x5f, 0x94, 0x02, 0x51, 0x54, 0x2c, 0x84, 0xaa, 0x49, 0x8a, 0x1b, 0xca, 0x05, 0x3b, 0x8b,
	0x41, 0x83, 0x51, 0x48, 0x9d, 0x8b, 0xdd, 0x3d, 0xb5, 0xc4, 0x37, 0x35, 0x31, 0x4f, 0x08, 0x59,
	0x4e, 0x0a, 0x55, 0x9f, 0x12, 0x83, 0x90, 0x11, 0x97, 0x00, 0x50, 0x61, 0x70, 0x72, 0x62, 0x49,
	0x49, 0x6a, 0x11, 0xd4, 0x8d, 0x68, 0x86, 0xc3, 0xb8, 0x10, 0x59, 0x25, 0x86, 0x24, 0x36, 0x70,
	0x68, 0x18, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x33, 0x8b, 0x99, 0x4c, 0x1c, 0x01, 0x00, 0x00,
}
